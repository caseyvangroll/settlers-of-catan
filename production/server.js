const express=require("express"),app=express(),geoip=require("geoip-lite"),countrynames=require("countrynames"),server=require("http").createServer(app),serveIndex=require("serve-index"),io=require("socket.io").listen(server),jwt=require("jsonwebtoken"),fs=require("fs"),winston=require("winston"),Log=require("./logger"),cookie=require("cookie"),cookieParser=require("cookie-parser"),bodyParser=require("body-parser"),port=3e3;app.use(cookieParser()),app.use(bodyParser.json()),app.use(bodyParser.urlencoded({extended:!0}));let colors=["#40A346","#406CA3","#C75FC2","#D10F0F"];const chosenColors=[],randomColor=()=>{0===colors.length&&(colors=chosenColors.slice());const color=colors.splice(Math.floor(Math.random()*colors.length),1);return chosenColors.push(color),color},mongoose=require("mongoose");mongoose.Promise=global.Promise;const mongoConfig=require("./mongoConfig.js"),User=require("./models/user.js");app.use(express.static("public")),app.use("/logs",express.static("logs")),app.use("/logs",serveIndex("logs",{stylesheet:`${__dirname}/public/css/logs.css`,icons:!0}));const lookup=ip=>{const result=geoip.lookup(ip);return result?`${result.city}, ${result.region}, ${countrynames.getName(result.country)}`:"Unknown"};app.get(["/","/enter.html"],(req,res)=>{const userIP=req.headers["x-forwarded-for"]||req.connection.remoteAddress,oldToken=req.cookies.superEvilVirus;oldToken?User.findOne({token:oldToken},(err,found)=>{found?(found.ip=userIP,found.state="Connecting...",found.save(),Log.server({action:"Reconnect",agent:found.nickname}),res.redirect("game.html")):(Log.server("Couldn't find user",{action:"Reconnect",agent:userIP}),res.clearCookie("superEvilVirus"),res.redirect("enter.html"))}):(Log.server(`Origin: ${lookup(userIP)}`,{action:"Connect",agent:userIP}),res.redirect("enter.html"))}),app.post("/enter.html",(req,res)=>{const userIP=req.headers["x-forwarded-for"]||req.connection.remoteAddress;jwt.sign({nickname:req.body.nickname},mongoConfig.prod.secret,{expiresIn:"8h"},(err,newToken)=>{new User({color:randomColor(),ip:userIP,nickname:req.body.nickname,state:"Connecting...",token:newToken}).save(),res.cookie("superEvilVirus",newToken),res.redirect("game.html")})}),io.on("connection",socket=>{const ip=socket.request.headers["x-forwarded-for"]||socket.request.connection.remoteAddress;Log.socket({action:"Open Socket",agent:ip}),socket.nickname=ip,socket.on("bind user",cookies=>{const signedToken=cookie.parse(cookies).superEvilVirus,decodedToken=jwt.verify(signedToken,mongoConfig.prod.secret);User.findOneAndUpdate({nickname:decodedToken.nickname,token:signedToken},{state:"Connected."},(err,found)=>{socket.color=found.color,socket.ip=found.ip,socket.nickname=found.nickname,socket.state=found.state,socket.token=found.token,Log.socket({action:`Bind ${ip} => ${socket.nickname}`}),io.emit("chat action",socket.nickname,"joined")})}),socket.on("submit message",msg=>{Log.chat(`  ${socket.nickname}: ${msg}`),io.emit("broadcast message",socket.nickname,socket.color,msg)}),socket.on("disconnect",()=>{io.emit("chat action",socket.nickname,"left"),User.findOneAndUpdate({token:socket.token},{state:"Disconnected."},()=>{Log.socket({action:"Close Socket",agent:socket.nickname})})})}),process.argv.length>2&&(process.argv.includes("test")?(Log.remove(winston.transports.Console),Log.remove(winston.transports.File),fs.existsSync("logs/Build-Unknown.log")&&fs.unlink("logs/Build-Unknown.log")):fs.existsSync("logs")||fs.mkdirSync("logs")),server.listen(3e3,()=>{mongoose.connect(mongoConfig.prod.uri,{useMongoClient:!0}),Log.server({action:"Start",agent:`localhost:3000`})});