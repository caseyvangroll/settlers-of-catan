const express=require("express"),app=express(),server=require("http").createServer(app),serveIndex=require("serve-index"),io=require("socket.io").listen(server),fs=require("fs"),winston=require("winston"),Log=require("./logger"),port=3e3;app.use(express.static("public")),app.use("/logs",express.static("logs")),app.use("/logs",serveIndex("logs",{stylesheet:`${__dirname}/public/css/logs.css`,icons:!0})),app.get("/setup",(req,res)=>{new User({name:"Nick Cerminara",password:"password",admin:!0}).save(err=>{if(err)throw err;console.log("User saved successfully"),res.json({success:!0})})}),io.on("connection",socket=>{const ip=socket.request.headers["x-forwarded-for"]||socket.request.connection.remoteAddress;Log.server({action:"Connect",agent:ip}),socket.on("submit message",msg=>{Log.chat(`${msg}`,{action:"Message",agent:ip}),io.emit("broadcast message",msg)}),socket.on("disconnect",()=>{Log.server({action:"Disconnect",agent:ip})})}),process.argv.length>2&&(process.argv.includes("test")?(Log.remove(winston.transports.Console),Log.remove(winston.transports.File),fs.existsSync("logs/Build-Unknown.log")&&fs.unlink("logs/Build-Unknown.log")):fs.existsSync("logs")||fs.mkdirSync("logs")),server.listen(3e3,()=>{Log.server({action:"Start",agent:`localhost:3000`})}),module.exports={closeServer:()=>{server.close()}};